{"version":3,"sources":["action/index.js","components/Alert.js","components/Todo.js","components/AddTodo.js","components/DropDown.js","components/App.js","reducer/index.js","index.js"],"names":["GET_TODO","DELETE_TODO","COMPLETE_TODO","UPDATE_TODO","ADD_NEW_TODO","fetchTodos","dispatch","fetch","method","headers","then","response","json","todos","type","todo","handelDelete","id","deleteTodo","handelMarkCompleted","body","JSON","stringify","completed","markComplete","handelUpdate","text","updateTodo","handelAddTodo","userId","title","data","console","log","addNewTodo","Transition","React","props","ref","Slide","direction","Alert","open","setOpen","message","Dialog","TransitionComponent","keepMounted","onClose","aria-describedby","DialogTitle","DialogContent","connectedComponent","connect","state","index","useState","showEdit","setEdit","status","setStatus","showAlert","alert","setAlert","Grid","container","justifyContent","style","marginTop","marginBottom","item","md","sm","Update","xs","className","Paper","elevation","width","height","padding","TextField","label","variant","toUpperCase","Button","onClick","newTask","document","getElementById","value","handelSave","marginLeft","color","display","user","newOpen","setNewOpen","newData","setNewData","handleClose","minWidth","overflow","autoFocus","margin","fullWidth","onChange","e","newValue","parseInt","target","handleUserId","handleIdTask","handleTask","DialogActions","setUser","useSelector","useEffect","textAlign","FormControl","sx","m","InputLabel","Select","labelId","event","MenuItem","spacing","map","DropDown","initialState","store","createStore","action","newTodo","filter","findIndex","updatedTodo","Index","UpdatedTodo","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8b8b871a.chunk.js","sourcesContent":["//created all constant\nexport const GET_TODO = 'GET_TODO'\nexport const DELETE_TODO= \"DELETE_TODO\";\nexport const COMPLETE_TODO= \"COMPLETE_TODO\";\nexport const UPDATE_TODO= \"COMPLETE_TODO\";\nexport const ADD_NEW_TODO = \"ADD_NEW_TODO\"\n\n//all required functions\nexport function getTodos(todo){\n    return{\n        type:GET_TODO,\n        todo\n    }\n}\n\nexport function deleteTodo(id){\n    return{\n        type:DELETE_TODO,\n        id\n    }\n}\n\nexport function markComplete(id){\n    return{\n        type:COMPLETE_TODO,\n        id\n    }\n}\n\nexport function updateTodo(id, text){\n    return{\n        type:UPDATE_TODO,\n        id,\n        text\n    }\n}\n\nexport function addNewTodo(data){\n    return{\n        type:ADD_NEW_TODO,\n        data\n    }\n}\n\n//using thunk middleware with dispatch as an argument \n\n//this function will hit todo api and dispatch an action with data\nexport function fetchTodos(){\n    const url= 'https://jsonplaceholder.typicode.com/todos';\n    return function(dispatch){\n        fetch(url,{\n            method:'GET',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              },\n        })\n        .then(response => response.json())\n        .then(todos => {\n            dispatch(getTodos(todos))\n        });\n    }\n}\n\n \n//this function will hit delete todo api (fake) and dispatch an action to delete task\nexport function handelDelete(id){\n    const url='https://jsonplaceholder.typicode.com/todos/delete';\n\n    return function(dispatch){\n        fetch(url,{\n            method:'DELETE',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              },\n        }).then(response => response.json())\n        .then(todo => {\n            dispatch(deleteTodo(id))\n        })\n    }\n}\n\n\n//this function will hit done todo api (fake) and dispatch an action to change status\nexport function handelMarkCompleted(id){\n    const url='https://jsonplaceholder.typicode.com/todos/done';\n\n    return function(dispatch){\n        fetch(url,{\n            method:'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              },\n              body:JSON.stringify({\n                id:id,\n                completed:true,\n        })\n        }).then(response => response.json())\n        .then(todo => {\n            dispatch(markComplete(id))\n        })\n    }\n}\n\n//this function will hit update todo api (fake) and dispatch an action to update task\nexport function handelUpdate(id, text){\n    const url='https://jsonplaceholder.typicode.com/todos/update';\n\n    return function(dispatch){\n        fetch(url,{\n            method:'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n              }\n        }).then(response => response.json())\n        .then(todo => {\n            dispatch(updateTodo(id, text))\n        })\n    }\n}\n\n\n//this function will hit add todo api (fake) and dispatch an action to add todo\nexport function handelAddTodo(userId, title, id){\n    const url='https://jsonplaceholder.typicode.com/todos';\n\n    return function(dispatch){\n\n        fetch(url,{\n            method:'POST',\n            headers: { \"Content-Type\" : \"application/json\"},\n            body:JSON.stringify({\n                userId: userId,\n                title:title,\n                completed:false        \n            })\n\n        }).then(response => response.json())\n        .then(data => {\n            console.log(\"action ==>\" , data)\n            data.id=id;\n            dispatch(addNewTodo(data));\n        })\n    }\n}\n\n\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n//common alert component\nexport default function Alert(props) {\n  \n  const {open , setOpen, message} = props\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle> {message}</DialogTitle>\n        <DialogContent>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","import React, {useState, useEffect} from \"react\";\nimport { connect } from \"react-redux\";\nimport {handelDelete , handelMarkCompleted, handelUpdate} from '../action'\nimport {Grid, Paper, Button, TextField} from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Alert from './Alert'\n \nfunction Todo(props) {\n\n    const{data ,  index} = props\n    // console.log( index , \"props.data\" , data.title)\n    const[showEdit , setEdit] = useState(false);\n    const [status, setStatus] =useState(data.completed)\n    //common alert \n    const [alert , setAlert] = useState({\n        showAlert: false,\n        message : \"\"\n    })\n    const [open, setOpen] = useState(false);\n\n    //call for deleting todo it will dispatch an action with id\n    const handelDeleteTodo = (id) =>{\n        props.dispatch(handelDelete(id))\n        setAlert({\n            showAlert : true,\n            message : \"Task Deleted ...\"\n        })\n        setOpen(true)\n        console.log(\"show alert\" ,  alert.showAlert )\n        setStatus(false)\n    }\n\n    //call for marking todo complete it will dispatch an action with id\n    const handelMarkCompletedTodo = (id) =>{\n        props.dispatch(handelMarkCompleted(id))\n        setStatus(true)\n    }\n    \n    const handelEdit = (id) =>{\n        setEdit(true)\n    }\n\n        //call for edit/update todo complete it will dispatch an action with id\n    const handelSave = (id) =>{\n        const newTask = document.getElementById('newTask');\n        props.dispatch(handelUpdate(id,newTask))\n        data.title = newTask.value\n        setEdit(false)\n    }\n    \n \n    return (\n        <>\n        <Grid container  justifyContent = \"center\" style = {{marginTop : \"25px\" , marginBottom : \"50px\" }}>\n           <Grid item md = {4} sm = {6}Update xs = {10} className = \"todo-container\" >\n                <Paper elevation={3} style = {{width : \"100%\" , height : \"100%\", padding : \"10px\" }} >\n                    <h1 className = \"heading\">Task ID : <span className = \"status\">{data.id} </span> </h1>\n                    <h1 className = \"heading\">\n                        Task : <span className = \"status\">\n                            {showEdit ? <TextField id=\"newTask\" label=\"Edit Task\" variant=\"standard\" /> : data.title.toUpperCase() }\n                            {\n                                showEdit ?\n                                <Button variant=\"contained\"  onClick = {() =>  handelSave(index) } style = {{marginLeft : \"20px\"}}> Save</Button>\n                                :\n                                <EditIcon  onClick = {() =>  handelEdit(index) } style = {{marginLeft : \"20px\" , color : \"#1976D2\"}}/>\n                            }\n                            </span></h1>\n\n\n                        <h1 className = \"heading\">Status: <span className = \"status\">{status ? <p style = {{display : \"inline\"}}>Completed</p> : <p style = {{display : \"inline\"}}>Pending</p>}</span></h1>\n                    {\n                       status?\n                        <Button variant=\"contained\" color=\"error\"  onClick = { () => handelDeleteTodo(data.id)} > Delete Task</Button>\n                        :\n                        <Button variant=\"contained\"onClick = {() => handelMarkCompletedTodo(data.id)} >Mark Completed</Button>\n                    }\n                </Paper>\n           </Grid>\n        </Grid>\n        {         \n             alert.showAlert &&\n            <Alert open = {open} setOpen = {setOpen} message = {alert.message}/>\n            }\n        </>\n    )\n}\n\nfunction mapStateToProps(state){\n    return{\n      todo:state.todo,\n    }\n  }\n  \n  const connectedComponent=connect(mapStateToProps)(Todo);\n  export default connectedComponent;\n\n","import  React, {useState} from 'react';\nimport { connect } from \"react-redux\";\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Alert from './Alert'\nimport {handelAddTodo} from '../action'\n\nfunction AddTodo(props) {\n\n  const {user} = props\n  const [open, setOpen] = useState(false);\n  //common alert\n  const [alert , setAlert] = useState({\n    showAlert: false,\n    message : \"\"\n})\n  const [newOpen , setNewOpen] = useState(false)\n  //created new data \n  const [newData , setNewData] = useState({\n    userId: \"\",\n    title : \"\",\n    id: \"\"\n})\n  \n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  //getting new userId\n  const handleUserId = (e) => {\n    const newValue = parseInt(e.target.value)\n    setNewData({\n      ...newData,\n      userId : newValue\n    })\n  };\n  \n  //getting new taskId\n  const handleTask = (e) => {\n    const newValue = e.target.value\n    setNewData({\n      ...newData,\n      title : newValue\n    })\n  };\n\n  //getting new task\n  const handleIdTask = (e) => {\n    const newValue = parseInt(e.target.value)\n    setNewData({\n      ...newData,\n      id :  newValue\n    })\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //call for add new todo it will dispatch an action with userId title and taskId\n  const handleADD = () => {\n    const {userId, title, id} = newData\n    console.log(userId, title, id)\n    if(title === \"\"){\n      setAlert({\n        showAlert : true,\n        message : \"Please Fill All Informations ...\"\n    })\n    setNewOpen(true)\n    return\n    }\n    props.dispatch(handelAddTodo(userId, title, id))\n    setNewData({\n      id : \"\",\n      title : \"\",\n      userId : \"\"\n    })\n    setOpen(false);\n    setAlert({\n      showAlert : true,\n      message : \"Todo Added ...\"\n  })\n  setNewOpen(true)\n  }; \n\n\n  return (\n    <>\n      <Button variant=\"outlined\" onClick={handleClickOpen} style ={{minWidth : \"300px\"}}>\n        ADD TODO\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle style ={{minWidth : \"500px\", overflow: \"hidden\"}}>Add new todo</DialogTitle>\n        <DialogContent style ={{ overflow: \"hidden\"}} >\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"userId\"\n            type=\"input\"\n            fullWidth\n            variant=\"standard\"\n            label = \"User Id\"\n            onChange = {(e) => handleUserId(e)}\n          />\n        </DialogContent>\n        <DialogContent style ={{ overflow: \"hidden\"}} >\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"taskId\"\n            type=\"input\"\n            fullWidth\n            variant=\"standard\"\n            label = \"Task Id\"\n            onChange = {(e) => handleIdTask(e)}\n          />\n        </DialogContent>\n        <DialogContent style ={{overflow: \"hidden\"}}>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"task\"\n            label=\"Task \"\n            type=\"input\"\n            fullWidth\n            variant=\"standard\"\n            onChange = {(e) => handleTask(e)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleADD}>Add</Button>\n        </DialogActions>\n      </Dialog>\n      {         \n             alert.showAlert &&\n            <Alert open = {newOpen} setOpen = {setNewOpen} message = {alert.message}/>\n            }\n    </>\n  );\n}\n\n\nfunction mapStateToProps(state){\n  return{\n    todo:state.todo,\n  }\n}\n\nconst connectedComponent=connect(mapStateToProps)(AddTodo);\nexport default connectedComponent;\n\n\n","import React, {useState, useEffect} from \"react\";\nimport { useSelector, connect } from \"react-redux\";\nimport {fetchTodos} from '../action'\nimport {InputLabel , MenuItem , FormControl, Select , Grid} from '@mui/material';\nimport Todo from './Todo'\nimport AddTodo from './AddTodo'\n \nfunction Dropdown(props) {\n\n    // console.log(\"DropDown props\" , props)\n\n    const [user, setUser] = useState('');\n    const handleChange = (event) => {\n        setUser(event.target.value);\n    };\n\n    //getting state by using useSelector hook\n    const todo = useSelector((state) => state.todo)\n\n    // fetch all todo from api using useEffect hook\n    useEffect (()=>{\n        props.dispatch(fetchTodos())\n    },[])\n\n    return (\n        <>\n        <Grid container justifyContent= \"center\" >\n            <Grid item md = {12}>\n                <h1 style = {{color : \"#1976D2\", textAlign : \"center\"}}> TODO LIST</h1>\n            </Grid>\n            <Grid item>\n                <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 200 }}>\n                    <InputLabel id=\"demo-simple-select-standard-label\">Select User</InputLabel>\n                    <Select\n                    labelId=\"demo-simple-select-standard-label\"\n                    id=\"demo-simple-select-standard\"\n                    value={user}\n                    onChange={handleChange}\n                    label=\"Select User\"\n                    >\n                    <MenuItem value={1}>1</MenuItem>\n                    <MenuItem value={2}>2</MenuItem>\n                    <MenuItem value={3}>3</MenuItem>\n                    <MenuItem value={4}>4</MenuItem>\n                    <MenuItem value={5}>5</MenuItem>\n                    <MenuItem value={6}>6</MenuItem>\n                    <MenuItem value={7}>7</MenuItem>\n                    <MenuItem value={8}>8</MenuItem>\n                    <MenuItem value={9}>9</MenuItem>\n                    <MenuItem value={10}>10</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n        </Grid>\n\n        {   //if there is any user selected then only show addTodo component\n        user >=1 &&\n            <Grid container justifyContent= \"center\" spacing = {100}>\n            <Grid item>\n                <AddTodo user= {user}/>\n            </Grid>\n        </Grid>\n        }\n\n        {todo &&\n        todo.map((item, index)=>{\n        return(\n            //show todos for specific user\n            user === item.userId && \n          <Todo data = {item}  key = {index}  index = {index}/>\n        )\n      })\n    }  \n        </>\n    )\n}\n\nfunction mapStateToProps(state){\n    return{\n      todo:state.todo,\n    }\n  }\n  \n  const connectedComponent=connect(mapStateToProps)(Dropdown);\n  export default connectedComponent;\n\n","import React,{ Component} from 'react';\nimport {connect } from \"react-redux\";\nimport DropDown from './DropDown'\nfunction App(props) {\n  return (\n    <>\n    <DropDown/>\n    </>\n  );\n}\n\n//use of provider and connect helps to pass state with passing props in every component\nfunction mapStateToProps(state){\n  return{\n    todo:state.todo,\n  }\n}\n\nconst connectedComponent=connect(mapStateToProps)(App);\nexport default connectedComponent;\n","//imported all the required const from actions\nimport {GET_TODO , DELETE_TODO, COMPLETE_TODO, UPDATE_TODO , ADD_NEW_TODO} from '../action/index'\n\n//initial state\nconst initialState={\n    todo:[]\n}\n\nexport default function rootReducer(state= initialState,action){\n    switch(action.type){\n        //get all todo from api\n        case GET_TODO:\n            return{\n                todo:action.todo\n            }\n        \n            //delete a task\n        case DELETE_TODO:\n            //filetering todo array on the basis of id passed \n        const newTodo=state.todo.filter(todo => todo.id !== action.id);\n        return{\n            ...state,\n            todo:newTodo\n        }\n\n        //complete a task\n        case COMPLETE_TODO:\n            //getting index on the basis of id passed \n            const index=state.todo.findIndex( todo => todo.id === action.id);\n            //deep cloaning  \n            const updatedTodo=state.todo.map(item => ({...item}));\n            //changing completed to true\n            updatedTodo[index].completed=true;\n            return{\n                ...state,\n                todo:updatedTodo\n            }\n            //update a task \n        case UPDATE_TODO:\n            const text=action.text;\n            //getting index on the basis of id passed\n            const Index=state.todo.findIndex( todo => todo.id === action.id);  \n            //deep cloaning \n            const UpdatedTodo=state.todo.map(item => ({...item}));\n            //changing title\n            UpdatedTodo[Index].title=text;\n            return{\n                ...state,\n                todo:updatedTodo\n            }\n            //add new task \n        case ADD_NEW_TODO:\n            // console.log(\"reducer ==>\" , action.data)\n            return{\n                //add new todo to 0 index\n                todo:[action.data , ...state.todo ]\n            }\n\n        default:\n            return  state;\n        }\n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore , applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport App from './components/App';\nimport rootReducer from './reducer';\n\n//created store \nconst store = createStore(rootReducer, applyMiddleware(logger,thunk))\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store} >\n       <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}